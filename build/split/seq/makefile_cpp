#     $Id$
#=============================================================================
#
#                 builds the executable for the block splitter
#
#=============================================================================

# ***************************** CREATE LINKS *********************************

link: lncode lnhead

lncode:
	@ echo "        linking source code"
	ln -s $(SPLITSRC)/*.F .
	ln -s $(CFLSRC_S)/umalloc.F .
	ln -s $(CFLSRC_S)/ufree.F .
	ln -s $(CFLSRC_S)/parser.F .
	ln -s $(CFLSRC_S)/readkey.F .
	ln -s $(CFLSRC_S)/outbuf.F .

lnhead:

# ***************************** SUFFIX RULES***********************************

#                    (to convert .F files to .f files)

.SUFFIXES: .F .TMP1

.F.f:
	$(CPP) $(CPPFLAG) $(CPPOPT) $*.F  $*.TMP1
	@grep -v '^[ ]*$$' < $*.TMP1 > $*.f
	@chmod 600 $*.f
	@rm $*.TMP1

# **************************** CREATE EXECUTABLE *****************************

SOURCE = cfl3d_to_tlns3d.f  mapblk.f      movseg.f     spltsg.f \
	 getdhdr.f          mapin.f       outgrd.f     termn8.f \
	 ipadd.f            mapout.f      renmbr.f     tlns3d_to_cfl3d.f \
	 ipfix.f            mapsplt.f     shortinp.f   splitter.f \
	 iprvsg.f           mkintr.f      sizer.f      umalloc.f \
	 ufree.f            mkseg.f       splt2.f      ingrd.f \
	 readkey.f          parser.f      main.f       outbuf.f


OBJECT = $(SOURCE:.f=.o)

SPLIT_HEAD  = 

$(OBJECT): $(SPLIT_HEAD)
	$(FTN) $(FFLAG) -c $*.f

$(EXEC): $(SOURCE) $(OBJECT)
	$(FTN) $(LFLAG) -o $(EXEC) $(OBJECT) $(LLIBS)
	@ echo "                                                              "
	@ echo "=============================================================="
	@ echo "                                                              "
	@ echo "                  DONE:  $(EXEC) created                      "
	@ echo "                                                              "
	@ echo "          the sequential executable can be found in:          "
	@ echo "                                                              "
	@ echo "                      $(DIR)/$(EXEC)                          "
	@ echo "                                                              "
	@ echo "=============================================================="
	@ echo "                                                              "

# ****************************** CLEAN/SCRUB *********************************

# the @touch is used to (silently) create some temp files to prevent irksome
# warning messages are sometimes created if there are no *.whatever files and
# one tries to remove them

cleano:
	@touch temp.o
	-rm -f *.o

cleane:
	-rm -f $(EXEC)

cleanf:
	@touch temp.f
	-rm -f *.f

cleang:
	@touch temp.F
	-rm -f *.F

cleanh:
	@touch temp.h
	-rm -f *.h

scrub: cleano cleane cleanf cleang cleanh 
